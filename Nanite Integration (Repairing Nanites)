// Recommended that you set Activation Cost to Reaction and the Limited Uses to 11/11.
// It uses one when activating the ability and then drains 1 each time macro is activated.
// When it reaches zero, it will turn itself off and set it back to maximum value.

// Will not work with multiple tokens selected.
// Will require that the user has the feat Nanite Integration.
// If you change the name of the feat to reflect your choice, reflect the name change at line 25.

// If you want to change the icon used for the effect, change line 21

main ()

async function main() {
  //Is a single token selected?
  console.log("Selected Token: ", canvas.tokens.controlled);
  if(canvas.tokens.controlled.length == 0 || canvas.tokens.controlled.length > 1) {
    ui.notifications.error("Please select a single token");
    return;
  }
  const user = canvas.tokens.controlled[0].actor;
  const icon = "systems/sfrpg/icons/spells/remove_radioactivity.webp";
  
  //Does user have the Nanite Integration feat?
  console.log("User of Repairing Nanites: ", user);
  const nanites = user.items.find(items => items.name == "Nanite Integration");
   if(nanites == null || nanites == undefined) {
     ui.notifications.error(`${actor.data.name} does not possess Nanite Integration`);
     return;
  }
  
  // Determines the number of rounds
  let min = nanites.system.uses.value;
  let minmax = nanites.system.uses.max;
  
  //Determines the intensity of the fast healing
  let healfactor = user.system.details.level.value;
  healfactor = healfactor/4;
  if(healfactor < 1)
    healfactor = 1;
  let healing = user.system.attributes.hp.value + healfactor;
  const maxhp = user.system.attributes.hp.max;
  
  const floaterText = {
    anchor: CONST.TEXT_ANCHOR_POINTS.CENTER,
    direction: CONST.TEXT_ANCHOR_POINTS.TOP,
    duration: 2500,
    fontSize: 16,
    fill: 0x00ff00,
    stroke: 0x000000,
    strokeThickness: 4,
    jitter: 0.3
  };
  
  const floaterLose = {
    anchor: CONST.TEXT_ANCHOR_POINTS.CENTER,
    direction: CONST.TEXT_ANCHOR_POINTS.BOTTOM,
    duration: 2500,
    fontSize: 16,
    fill: 0xff0000,
    stroke: 0x000000,
    strokeThickness: 4,
    jitter: 0.3
  };

  if (nanites.isActive() == true) {
    if (min == minmax-1) {
      let resolve = user.system.attributes.rp.value;
      if (resolve >= 1) {
        resolve--;
        token.toggleEffect(icon);
        canvas.interface.createScrollingText(token.center, `+Nanite Regeneration`, floaterText);
        user.update({"system.attributes.rp.value": resolve});
      }
      else {
        ui.notifications.warn("You have run out of Resolve Points!");
      }
    }

    //If there is still time, inform user of how long left and how much healing they get every round, else inform them that it has expired.
    if(min > 0) {
      ui.notifications.warn(`Seconds left of fast healing ${healfactor}: ${min*6}`);
      if(healing >= maxhp) {
        healing = maxhp;
      }
      min--;
      nanites.update({"system.uses.value": min});
      user.update({"system.attributes.hp.value": healing});
    }
    else if(min == 0) {
      ui.notifications.info(`Fast Healing has expired`);
      token.toggleEffect(icon);
      canvas.interface.createScrollingText(token.center, `-Nanite Regeneration`, floaterLose);
      nanites.setActive(false);
      nanites.update({"system.uses.value": minmax});
    }
  }
}
